/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//plugins {
    //id 'nu.studer.jooq' version '3.0.3'
//}
apply plugin: 'nu.studer.jooq' 

dependencies {
    compile deps.jooq
    compile deps.jooq_codegen
    compile deps.jooq_meta
    compile deps.javax_annotations
    compile deps.jaxws_api

    jooqRuntime deps.mysql_connector_java

    // The following are required to put JAXB on the JOOQ classpath for the purpose of JOOQ code generation in J9+.
    // Later versions of the JOOQ Gradle plugin should make this unnecessary.
    jooqRuntime 'javax.activation:activation:1.1.1'
    jooqRuntime 'javax.xml.bind:jaxb-api:2.3.0'
    jooqRuntime 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    jooqRuntime 'com.sun.xml.bind:jaxb-impl:2.3.0.1'
}

def propNameJooqGeneration = 'jooqGeneration'

//to run the jooq code generation add the following to the gradle command arguments
//-PjooqGeneration=true
if (getPropertyOrDefault(propNameJooqGeneration, "false") == "true") {
    configure(project) {
        //configure jooq plugin to generate code
        jooq {
            version = '3.11.9'
            edition = 'OSS'
            authdb(sourceSets.main) {
                jdbc {
                    driver = 'com.mysql.jdbc.Driver'
                    url = 'jdbc:mysql://localhost:3307/auth'
                    user = 'authuser'
                    password = 'stroompassword1'
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = 'auth'
                        // Add anything you want included in generation below
                        includes = 'users|tokens|token_types|json_web_key'

                        // We don't want to include flyway versioning
                        excludes = 'schema_version'

                        forcedTypes {
                            // Force TINYINT to Booelan rather than Byte
                            forcedType {
                                name = 'BOOLEAN'
                                types = '(?i:TINYINT)'
                            }
                        }
                    }
                    target {
                        packageName = 'stroom.auth.db'
                        directory = 'src/main/java'
                    }
                }
            }
        }
    }
}


