/*
 * This file is generated by jOOQ.
 */
package stroom.auth.db;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import stroom.auth.db.tables.JsonWebKey;
import stroom.auth.db.tables.TokenTypes;
import stroom.auth.db.tables.Tokens;
import stroom.auth.db.tables.Users;
import stroom.auth.db.tables.records.JsonWebKeyRecord;
import stroom.auth.db.tables.records.TokenTypesRecord;
import stroom.auth.db.tables.records.TokensRecord;
import stroom.auth.db.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>auth</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<JsonWebKeyRecord, Integer> IDENTITY_JSON_WEB_KEY = Identities0.IDENTITY_JSON_WEB_KEY;
    public static final Identity<TokensRecord, Integer> IDENTITY_TOKENS = Identities0.IDENTITY_TOKENS;
    public static final Identity<TokenTypesRecord, Integer> IDENTITY_TOKEN_TYPES = Identities0.IDENTITY_TOKEN_TYPES;
    public static final Identity<UsersRecord, Integer> IDENTITY_USERS = Identities0.IDENTITY_USERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_PRIMARY = UniqueKeys0.KEY_JSON_WEB_KEY_PRIMARY;
    public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_KEYID = UniqueKeys0.KEY_JSON_WEB_KEY_KEYID;
    public static final UniqueKey<TokensRecord> KEY_TOKENS_PRIMARY = UniqueKeys0.KEY_TOKENS_PRIMARY;
    public static final UniqueKey<TokensRecord> KEY_TOKENS_ID = UniqueKeys0.KEY_TOKENS_ID;
    public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_PRIMARY = UniqueKeys0.KEY_TOKEN_TYPES_PRIMARY;
    public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_ID = UniqueKeys0.KEY_TOKEN_TYPES_ID;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL = UniqueKeys0.KEY_USERS_EMAIL;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TokensRecord, UsersRecord> FK_ISSUED_TO = ForeignKeys0.FK_ISSUED_TO;
    public static final ForeignKey<TokensRecord, TokenTypesRecord> FK_TOKEN_TYPE_ID = ForeignKeys0.FK_TOKEN_TYPE_ID;
    public static final ForeignKey<TokensRecord, UsersRecord> FK_ISSUED_BY_USER = ForeignKeys0.FK_ISSUED_BY_USER;
    public static final ForeignKey<TokensRecord, UsersRecord> FK_UPDATED_BY_USER = ForeignKeys0.FK_UPDATED_BY_USER;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<JsonWebKeyRecord, Integer> IDENTITY_JSON_WEB_KEY = Internal.createIdentity(JsonWebKey.JSON_WEB_KEY, JsonWebKey.JSON_WEB_KEY.ID);
        public static Identity<TokensRecord, Integer> IDENTITY_TOKENS = Internal.createIdentity(Tokens.TOKENS, Tokens.TOKENS.ID);
        public static Identity<TokenTypesRecord, Integer> IDENTITY_TOKEN_TYPES = Internal.createIdentity(TokenTypes.TOKEN_TYPES, TokenTypes.TOKEN_TYPES.ID);
        public static Identity<UsersRecord, Integer> IDENTITY_USERS = Internal.createIdentity(Users.USERS, Users.USERS.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_PRIMARY = Internal.createUniqueKey(JsonWebKey.JSON_WEB_KEY, "KEY_json_web_key_PRIMARY", JsonWebKey.JSON_WEB_KEY.ID);
        public static final UniqueKey<JsonWebKeyRecord> KEY_JSON_WEB_KEY_KEYID = Internal.createUniqueKey(JsonWebKey.JSON_WEB_KEY, "KEY_json_web_key_keyId", JsonWebKey.JSON_WEB_KEY.KEYID);
        public static final UniqueKey<TokensRecord> KEY_TOKENS_PRIMARY = Internal.createUniqueKey(Tokens.TOKENS, "KEY_tokens_PRIMARY", Tokens.TOKENS.ID);
        public static final UniqueKey<TokensRecord> KEY_TOKENS_ID = Internal.createUniqueKey(Tokens.TOKENS, "KEY_tokens_id", Tokens.TOKENS.ID);
        public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_PRIMARY = Internal.createUniqueKey(TokenTypes.TOKEN_TYPES, "KEY_token_types_PRIMARY", TokenTypes.TOKEN_TYPES.ID);
        public static final UniqueKey<TokenTypesRecord> KEY_TOKEN_TYPES_ID = Internal.createUniqueKey(TokenTypes.TOKEN_TYPES, "KEY_token_types_id", TokenTypes.TOKEN_TYPES.ID);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, "KEY_users_PRIMARY", Users.USERS.ID);
        public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL = Internal.createUniqueKey(Users.USERS, "KEY_users_email", Users.USERS.EMAIL);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<TokensRecord, UsersRecord> FK_ISSUED_TO = Internal.createForeignKey(stroom.auth.db.Keys.KEY_USERS_PRIMARY, Tokens.TOKENS, "fk_issued_to", Tokens.TOKENS.USER_ID);
        public static final ForeignKey<TokensRecord, TokenTypesRecord> FK_TOKEN_TYPE_ID = Internal.createForeignKey(stroom.auth.db.Keys.KEY_TOKEN_TYPES_PRIMARY, Tokens.TOKENS, "fk_token_type_id", Tokens.TOKENS.TOKEN_TYPE_ID);
        public static final ForeignKey<TokensRecord, UsersRecord> FK_ISSUED_BY_USER = Internal.createForeignKey(stroom.auth.db.Keys.KEY_USERS_PRIMARY, Tokens.TOKENS, "fk_issued_by_user", Tokens.TOKENS.ISSUED_BY_USER);
        public static final ForeignKey<TokensRecord, UsersRecord> FK_UPDATED_BY_USER = Internal.createForeignKey(stroom.auth.db.Keys.KEY_USERS_PRIMARY, Tokens.TOKENS, "fk_updated_by_user", Tokens.TOKENS.UPDATED_BY_USER);
    }
}
