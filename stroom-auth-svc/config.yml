server:
  registerDefaultExceptionMappers: false
  adminMinThreads: 1
  adminMaxThreads: 10
  adminContextPath: ${ADMIN_CONTEXT_PATH:- /}
  applicationContextPath: ${APPLICATION_CONTEXT_PATH:- /}
  applicationConnectors:
    - type: http
      port: ${STROOM_AUTH_SERVICE_PORT:- 8099}
  adminConnectors:
    - type: http
      port: ${STROOM_AUTH_SERVICE_ADMIN_PORT:- 8100}

database:
  driverClass: org.mariadb.jdbc.Driver
  user: ${DB_USER:- stroomuser}
  password: ${DB_PASSWORD:- stroompassword1}
  url: ${DB_URL:- jdbc:mariadb://<IP_ADDRESS>:3309/auth}
  properties:
    charSet: UTF-8
    hibernate.dialect: org.hibernate.dialect.MySQLInnoDBDialect
    hibernate.show_sql: false

logging:
  level: ${LOGGING_LEVEL:- ERROR}
  loggers:
    stroom: DEBUG
    io.dropwizard: INFO
    org.eclipse.jetty: INFO
    org.flywaydb: INFO
  appenders:
    - type: console
      logFormat: "%-6level [%d{HH:mm:ss.SSS}] [%t] %logger{5} - %X{code} %msg %n"
      timeZone: UTC

jooq:
  dialect: MYSQL
  logExecutedSql: yes
  renderSchema: yes
  renderNameStyle: QUOTED
  renderKeywordStyle: LOWER
  renderFormatted: no
  paramType: INDEXED
  statementType: PREPARED_STATEMENT
  executeLogging: no
  executeWithOptimisticLocking: no
  attachRecords: yes
  updatablePrimaryKeys: no

token:
  minutesUntilExpirationForUserToken: ${JWS_MINUTES_UNTIL_EXPIRATION_FOR_USER_TOKEN:- 43200} # 43200 minutes = 30 days
  minutesUntilExpirationForApiToken: ${JWS_MINUTES_UNTIL_EXPIRATION_FOR_API_TOKEN:- 525600} # 525600 minutes = 1 year
  minutesUntilExpirationForEmailResetToken: ${JWS_MINUTES_UNTIL_EXPIRATION_FOR_EMAIL_RESET_TOKEN:- 5} # 5 minutes - short validity for the token
  jwsIssuer: ${JWS_ISSUER:- stroom}
  requireExpirationTime: ${JWS_REQUIRE_EXPIRATION_TIME:- false}
  algorithm: ${JWS_ALGORITHM:- RS256}

certificateDnPattern: ${CERTIFICATE_DN_PATTERN:- .*\((.*)\)} # This is the Java regex pattern used to capture the ID from the CN.
certificateDnCaptureGroupIndex: ${CERTIFICATE_DN_CAPTURE_GROUP_INDEX:- 1} # The pattern above must identify the group with the sid.loginUrl: ${AUTH_UI:- http://<IP_ADDRESS>:5000/login}
loginUrl: ${AUTH_UI:- http://<IP_ADDRESS>:5000/login}
changePasswordUrl: ${CHANGE_PASSWORD_URL:-http://<IP_ADDRESS>:5000/changePassword}
stroomUrl: ${STROOM_UI:- http://<IP_ADDRESS>:8099}
resetPasswordUrl: ${RESET_PASSWORD_URL:- 'http://<IP_ADDRESS>/resetPassword/?token=%s'}
advertisedHost: ${ADVERTISED_HTTP_HOST:- http://<IP_ADDRESS>:5000}
failedLoginLockThreshold: ${FAILED_LOGIN_LOCK_THRESHOLD:- 3}
sessionIdCookieMaxAge: ${SESSION_ID_COOKIE_MAX_AGE:- 2592000} # 2592000 = 1 month

authorisationService:
  url: ${AUTHORISATION_SERVICE_URL:- http://<IP_ADDRESS>:8080/api/authorisation/v1}
  canManageUsersPath: ${AUTHORISATION_SERVICE_CAN_MANAGE_USERS_PATH:- /canManageUsers}
  canManageUsersPermission: ${AUTHORISATION_SERVICE_CAN_MANAGE_USERS_PERMISSION:- Manage Users}

email:
  fromAddress: ${EMAIL_FROM_ADDRESS:- noreply@stroom.com}
  fromName: ${EMAIL_FROM_NAME:- Stroom User Accounts}
  passwordResetSubject: ${EMAIL_RESET_SUBJECT:- Password reset for Stroom}
  passwordResetText: ${EMAIL_RESET_TEXT:- 'A password reset has been requested for this email address. Please visit the following URL to reset your password: %s.'}
  passwordResetTokenValidityInMinutes: ${EMAIL_RESET_TOKEN_VALIDITY_IN_MINUTES:- 5}
  smtp:
    host: ${EMAIL_SMTP_HOST:- smtp.gmail.com}
    port: ${EMAIL_SMTP_PORT:- 587}
    transport: ${EMAIL_SMTP_TRANSPORT:- TLS} # Possible values: TLS, SSL, plain. Defaults to plain if unspecified.
    username: ${EMAIL_SMTP_USERNAME:- TODO}
    password: ${EMAIL_SMTP_PASSWORD:- TODO}

passwordIntegrityChecks:
  disableInactiveNewAccountAfterXDays: ${DISABLE_INACTIVE_NEW_ACCOUNT_AFTER_X_DAYS:- 30}
  disableInactiveAccountAfterXDays: ${DISABLE_INACTIVE_ACCOUNT_AFTER_X_DAYS:- 90}
  requirePasswordChangeAfterXDays: ${REQUIRE_PASSWORD_CHANGE_AFTER_X_DAYS:- 30}
  secondsBetweenChecks: ${SECONDS_BETWEEN_PASSWORD_INTEGRITY_CHECKS:- 120}