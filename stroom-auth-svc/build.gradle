/*
 * Copyright 2017 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow' 
apply plugin: 'com.benjaminsproule.swagger'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'com.jfrog.bintray'

mainClassName = 'stroom.auth.service.App'

jar {
    manifest {
        attributes (
            "Implementation-Title": "Stroom Auth Service",
            "Implementation-Version": versions.stroomAuth,
            "Main-Class": "stroom.auth.service.App"
        )
    }

    archiveName 'stroom-auth-service.jar'
}

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true
    mergeServiceFiles()
    archiveName 'stroom-auth-service-all.jar'
}

sourceSets {
    // This lets us use different directories for our integration tests.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

// Configure the run task to start the Dropwizard service
run {
    args 'server', './config.generated.yml'
}

//configurations {
    //testArtifacts
    //sourceArtifacts

    //// This means our integration tests get all the dependencies from our tests and we don't need to specify them twice.
    //integrationTestCompile.extendsFrom testCompile
    //integrationTestRuntime.extendsFrom testRuntime
//}

//task sources(type: Jar) {
    //baseName = "${project.name}-source"
    //from sourceSets.main.allSource
//}

//artifacts {
    //sourceArtifacts sources
//}

//// This task lets us run the actual integration tests.
//task integrationTest(type: Test) {
    //testClassesDirs = sourceSets.integrationTest.output.classesDirs
    //classpath = sourceSets.integrationTest.runtimeClasspath
//}

//// These lines pull the integration test task into our build process.
//check.dependsOn integrationTest
//integrationTest.mustRunAfter test

//// This means the reports from our integration tests won't over-write the reports from our unit tests.
//tasks.withType(Test) {
    //reports.html.destination = file("${reporting.baseDir}/${name}")
//}

dependencies {
    compile project(':stroom-persistence')
    compile project(':stroom-auth-service-api')
    compile deps.dropwizard_core
    compile deps.dropwizard_flyway
    compile deps.dropwizard_jooq
    compile deps.dropwizard_jersey
    compile deps.dropwizard_auth
    compile deps.dropwizard_auth_jwt
    compile deps.bcrypt
    compile deps.jose4j
    compile deps.guice
    compile deps.slf4j
    compile deps.shiro_core
    compile deps.flyway_core
    compile deps.curator_service_discovery
    compile deps.simple_java_mail
    compile deps.swagger_annotations
    compile deps.eventLogging
    compile deps.jaxb_api
    compile deps.jaxb_core
    compile deps.jaxb_impl
    compile deps.javax_activation

    runtime deps.mariadb_connector

    testCompile testDeps.junit
    testCompile testDeps.assertj
    testCompile testDeps.wiremock

    integrationTestCompile testDeps.dropwizard_testing
    integrationTestCompile testDeps.moshi
    integrationTestCompile testDeps.unirest
}

def apiProjectRoot = "${projectDir}/../stroom-auth-service-api"

swagger {
    apiSource {
        springmvc = false //makes it search for jersey annotations
        outputFormats = 'json,yaml'
        locations = [
                'stroom.auth.resources.token.v1.TokenResource',
                'stroom.auth.resources.token.v1.SearchRequest',
                'stroom.auth.resources.token.v1.SearchResponse',
                'stroom.auth.resources.token.v1.Token',
                'stroom.auth.resources.token.v1.CreateTokenRequest',

                'stroom.auth.resources.authentication.v1.AuthenticationResource',
                'stroom.auth.resources.authentication.v1.Credentials',
                'stroom.auth.resources.authentication.v1.IdTokenRequest',

                'stroom.auth.resources.session.v1.SessionResource',

                'stroom.auth.resources.user.v1.UserResource',
                'javax.ws.rs.core.Response']
        schemes = [
                'http',
                'https' ]
        host = 'localhost:8080'
        basePath = '/'
        info {
            title = 'Stroom Auth API'
            version = 'v1'
            description = 'Various APIs for interacting with authentication, users, and tokens.'
            contact {
                name = 'GCHQ'
                url = 'https://github.com/gchq/stroom-auth'
            }
            license {
                url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                name = 'Apache 2.0'
            }
        }
        outputPath = "$apiProjectRoot/generated/document.html"
        swaggerDirectory = "./swagger"
    }
}

//TODO this depends on the YAML being generated - make it a gradle dep

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator
def sourceFolder = "$apiProjectRoot/src/main/java"
task generateSwaggerApi {
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("./swagger/swagger.yaml")
        config.setOutputDir("$apiProjectRoot")
        config.setLang('java')
        config.setAdditionalProperties([
                'interfaceOnly' : 'true',
                'apiPackage'    : 'stroom.auth.service.api',
                'modelPackage'  : 'stroom.auth.service.api.model',
                'sourceFolder'  : 'src/main/java'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}
