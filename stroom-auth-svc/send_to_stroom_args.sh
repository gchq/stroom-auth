#!/usr/bin/env bash

# Created by argbash-init v2.6.1
# ARG_OPTIONAL_BOOLEAN([secure],[s],[Check for valid certificates if running over HTTPS],[false])
# ARG_OPTIONAL_BOOLEAN([delete_after_sending],[d],[Delete log files after sending them],[false])
# ARG_OPTIONAL_BOOLEAN([no_pretty],[p],[Disable colours in the output, which is useful when sending the results to a log file],[false])
# ARG_OPTIONAL_SINGLE([max_sleep],[m],[Max time allowed to sleep (e.g. to avoid all cron's in the estate sending log files at the same time)],[0])
# ARG_POSITIONAL_SINGLE([log_dir],[Directory to look for log files],[])
# ARG_POSITIONAL_SINGLE([feed],[ Your feed name given to you],[])
# ARG_POSITIONAL_SINGLE([system],[Your system name, i.e. what your project/service or capability is known as],[])
# ARG_POSITIONAL_SINGLE([environment],[Your environment name. Usually SITE_DEPLOYMENT],[])
# ARG_POSITIONAL_SINGLE([stroom_url],[The URL you are sending data to (N.B. This should be the HTTPS URL)],[])
# ARG_DEFAULTS_POS()
# ARG_HELP([This script will send log files to Stroom.])
# ARG_VERSION([echo $0 v0.1])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

begins_with_short_option()
{
  local first_option all_short_options
  all_short_options='sdpmhv'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_log_dir=
_arg_feed=
_arg_system=
_arg_environment=
_arg_stroom_url=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_secure="false"
_arg_delete_after_sending="false"
_arg_no_pretty="false"
_arg_max_sleep="0"

print_help ()
{
  printf '%s\n' "This script will send log files to Stroom."
  printf 'Usage: %s [-s|--(no-)secure] [-d|--(no-)delete_after_sending] [-p|--(no-)no_pretty] [-m|--max_sleep <arg>] [-h|--help] [-v|--version] <log_dir> <feed> <system> <environment> <stroom_url>\n' "$0"
  printf '\t%s\n' "<log_dir>: Directory to look for log files"
  printf '\t%s\n' "<feed>:  Your feed name given to you"
  printf '\t%s\n' "<system>: Your system name, i.e. what your project/service or capability is known as"
  printf '\t%s\n' "<environment>: Your environment name. Usually SITE_DEPLOYMENT"
  printf '\t%s\n' "<stroom_url>: The URL you are sending data to (N.B. This should be the HTTPS URL)"
  printf '\t%s\n' "-s,--secure,--no-secure: Check for valid certificates if running over HTTPS (false by default)"
  printf '\t%s\n' "-d,--delete_after_sending,--no-delete_after_sending: Delete log files after sending them (false by default)"
  printf '\t%s\n' "-p,--no_pretty,--no-no_pretty: Disable colours in the output, which is useful when sending the results to a log file (false by default)"
  printf '\t%s\n' "-m,--max_sleep: Max time allowed to sleep (e.g. to avoid all cron's in the estate sending log files at the same time) (default: '0')"
  printf '\t%s\n' "-h,--help: Prints help"
  printf '\t%s\n' "-v,--version: Prints version"
}

parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -s|--no-secure|--secure)
        _arg_secure="on"
        test "${1:0:5}" = "--no-" && _arg_secure="off"
        ;;
      -s*)
        _arg_secure="on"
        _next="${_key##-s}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -d|--no-delete_after_sending|--delete_after_sending)
        _arg_delete_after_sending="on"
        test "${1:0:5}" = "--no-" && _arg_delete_after_sending="off"
        ;;
      -d*)
        _arg_delete_after_sending="on"
        _next="${_key##-d}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -p|--no-no_pretty|--no_pretty)
        _arg_no_pretty="on"
        test "${1:0:5}" = "--no-" && _arg_no_pretty="off"
        ;;
      -p*)
        _arg_no_pretty="on"
        _next="${_key##-p}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -m|--max_sleep)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_max_sleep="$2"
        shift
        ;;
      --max_sleep=*)
        _arg_max_sleep="${_key##--max_sleep=}"
        ;;
      -m*)
        _arg_max_sleep="${_key##-m}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      -v|--version)
        echo $0 v0.1
        exit 0
        ;;
      -v*)
        echo $0 v0.1
        exit 0
        ;;
      *)
        _positionals+=("$1")
        ;;
    esac
    shift
  done
}


handle_passed_args_count ()
{
  _required_args_string="'log_dir', 'feed', 'system', 'environment' and 'stroom_url'"
  test ${#_positionals[@]} -ge 5 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 5 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
  test ${#_positionals[@]} -le 5 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 5 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
  _positional_names=('_arg_log_dir' '_arg_feed' '_arg_system' '_arg_environment' '_arg_stroom_url' )

  for (( ii = 0; ii < ${#_positionals[@]}; ii++))
  do
    eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
# ] <-- needed because of Argbash
